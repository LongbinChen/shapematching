markus weimer's feedback for bmrm:

1. change the size (int) of bmrm objects to size_t
2. add () operator overloading for get/set
3. return POD by reference (not by ref in function arg)
/4. remove empty constructor in bmrmexception
5. look into the issues of Data() in the sparse matrix/vector case
6. change enum from int to Type
7. change SML::eps to BMRM::eps, similarly for SML::inf


vishy's comment
/1. remove all CInfo
/2. multiclassloss: remove dependency on the matrixrowview by adding a function in data to query for a single f [chteo: done]
/3. loss need not take w
/4. model to contain loss and loss contain data. model create w and pass ref to solvers.
/5. constructor of solver takes model (instead of loss)
/6. solver.train() no longer take w.

chteo:
/1. Remove setdata from the loss class.
/2. Make CData real abstract class. Scalar and Vector losses now require CVecData
/3. Make the CreateInnerSolver into a InnerSolverFactory object just like the data and loss factories.
/4. reflect latest changes to linear-bmrm-predict.cpp  
/5. Create SolverFactory class 
6. See if possible to move Evaluate() and Predict() out of CLoss
/7. Model refactoring [loss keeps a pointer to model]
8. SetCol and flatten 
9. document GetRow GetCol behavior
/10. Loss factory to assert for dimOfW and numOfW [fixed by having model initialized during loss construction]
/11. Add Transpose function in SML
12. Port old losses
13. remove calls to _data->maxLabel() and replace with
   _data->classes(). Provide corresponding functionality in CData. or
   document it. 
/14. separate bmrm.cpp for parallel case.
15. Locking the config. 
16. Improve TheMatrix::SumRows() [chteo: hint given in the code segment]
17. Make COnlineVecData acceptable to all losses we have now

kishor:
1. VC++ make file
2. Automake and autoconf (markus?) 

vishy:
1. Document how to add a new loss 
2. What we need to do is to ensure that we don't depend on side effects by
   objects setting and reading values into the config object. Is there a way to 
   ensure that the config object becomes a read only object after the
   configuration file is read.
3. Review to check that pointers are not passed unncessarily. Consts are
   added. References are used.
4. We need the ability to support many different solver backends (e.g. online
   BFGS, standard LBFGS, etc etc) so we need a generic solver interface with a
   solver factory (just like the loss and data factories). This is low
   priority.
5. Check feasibility of distributing clp with our solver.

both:

-1. We need to try to get a stock standard ./configure script going (use KDevelop) and see if it gets us anywhere.
