# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _alignment
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


MAPTYPE_CONSTANT = _alignment.MAPTYPE_CONSTANT
MAPTYPE_UNCHANGE = _alignment.MAPTYPE_UNCHANGE
MAPTYPE_ABS = _alignment.MAPTYPE_ABS
MAPTYPE_EU = _alignment.MAPTYPE_EU
MAPTYPE_ABSEU = _alignment.MAPTYPE_ABSEU
MAPTYPE_MATCH = _alignment.MAPTYPE_MATCH
MAPTYPE_GAP = _alignment.MAPTYPE_GAP
MATCH = _alignment.MATCH
SUBST = _alignment.SUBST
DELET = _alignment.DELET
INSRT = _alignment.INSRT
class CAlignment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAlignment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAlignment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_pSS1"] = _alignment.CAlignment_m_pSS1_set
    __swig_getmethods__["m_pSS1"] = _alignment.CAlignment_m_pSS1_get
    if _newclass:m_pSS1 = _swig_property(_alignment.CAlignment_m_pSS1_get, _alignment.CAlignment_m_pSS1_set)
    __swig_setmethods__["m_pSS2"] = _alignment.CAlignment_m_pSS2_set
    __swig_getmethods__["m_pSS2"] = _alignment.CAlignment_m_pSS2_get
    if _newclass:m_pSS2 = _swig_property(_alignment.CAlignment_m_pSS2_get, _alignment.CAlignment_m_pSS2_set)
    __swig_setmethods__["m_SeqIndex1"] = _alignment.CAlignment_m_SeqIndex1_set
    __swig_getmethods__["m_SeqIndex1"] = _alignment.CAlignment_m_SeqIndex1_get
    if _newclass:m_SeqIndex1 = _swig_property(_alignment.CAlignment_m_SeqIndex1_get, _alignment.CAlignment_m_SeqIndex1_set)
    __swig_setmethods__["m_SeqIndex2"] = _alignment.CAlignment_m_SeqIndex2_set
    __swig_getmethods__["m_SeqIndex2"] = _alignment.CAlignment_m_SeqIndex2_get
    if _newclass:m_SeqIndex2 = _swig_property(_alignment.CAlignment_m_SeqIndex2_get, _alignment.CAlignment_m_SeqIndex2_set)
    __swig_setmethods__["m_PointIndex1"] = _alignment.CAlignment_m_PointIndex1_set
    __swig_getmethods__["m_PointIndex1"] = _alignment.CAlignment_m_PointIndex1_get
    if _newclass:m_PointIndex1 = _swig_property(_alignment.CAlignment_m_PointIndex1_get, _alignment.CAlignment_m_PointIndex1_set)
    __swig_setmethods__["m_PointIndex2"] = _alignment.CAlignment_m_PointIndex2_set
    __swig_getmethods__["m_PointIndex2"] = _alignment.CAlignment_m_PointIndex2_get
    if _newclass:m_PointIndex2 = _swig_property(_alignment.CAlignment_m_PointIndex2_get, _alignment.CAlignment_m_PointIndex2_set)
    __swig_setmethods__["m_operation"] = _alignment.CAlignment_m_operation_set
    __swig_getmethods__["m_operation"] = _alignment.CAlignment_m_operation_get
    if _newclass:m_operation = _swig_property(_alignment.CAlignment_m_operation_get, _alignment.CAlignment_m_operation_set)
    __swig_setmethods__["m_fScore"] = _alignment.CAlignment_m_fScore_set
    __swig_getmethods__["m_fScore"] = _alignment.CAlignment_m_fScore_get
    if _newclass:m_fScore = _swig_property(_alignment.CAlignment_m_fScore_get, _alignment.CAlignment_m_fScore_set)
    def __init__(self, *args): 
        this = _alignment.new_CAlignment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _alignment.delete_CAlignment
    __del__ = lambda self : None;
    def AddAlignment(*args): return _alignment.CAlignment_AddAlignment(*args)
    def GetPhi(*args): return _alignment.CAlignment_GetPhi(*args)
    def GetBound(*args): return _alignment.CAlignment_GetBound(*args)
    __swig_setmethods__["m_bSameClass"] = _alignment.CAlignment_m_bSameClass_set
    __swig_getmethods__["m_bSameClass"] = _alignment.CAlignment_m_bSameClass_get
    if _newclass:m_bSameClass = _swig_property(_alignment.CAlignment_m_bSameClass_get, _alignment.CAlignment_m_bSameClass_set)
CAlignment_swigregister = _alignment.CAlignment_swigregister
CAlignment_swigregister(CAlignment)



